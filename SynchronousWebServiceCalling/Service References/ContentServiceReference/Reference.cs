//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.3053
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This code was auto-generated by Microsoft.Silverlight.ServiceReference, version 3.0.40624.0
// 
namespace SynchronousWebServiceCalling.ContentServiceReference {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "3.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(Namespace="", ConfigurationName="ContentServiceReference.ContentService")]
    public interface ContentService {
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="urn:ContentService/ReturnServerTime", ReplyAction="urn:ContentService/ReturnServerTimeResponse")]
        System.IAsyncResult BeginReturnServerTime(System.AsyncCallback callback, object asyncState);
        
        string EndReturnServerTime(System.IAsyncResult result);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "3.0.0.0")]
    public interface ContentServiceChannel : SynchronousWebServiceCalling.ContentServiceReference.ContentService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "3.0.0.0")]
    public partial class ReturnServerTimeCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public ReturnServerTimeCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public string Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "3.0.0.0")]
    public partial class ContentServiceClient : System.ServiceModel.ClientBase<SynchronousWebServiceCalling.ContentServiceReference.ContentService>, SynchronousWebServiceCalling.ContentServiceReference.ContentService {
        
        private BeginOperationDelegate onBeginReturnServerTimeDelegate;
        
        private EndOperationDelegate onEndReturnServerTimeDelegate;
        
        private System.Threading.SendOrPostCallback onReturnServerTimeCompletedDelegate;
        
        private BeginOperationDelegate onBeginOpenDelegate;
        
        private EndOperationDelegate onEndOpenDelegate;
        
        private System.Threading.SendOrPostCallback onOpenCompletedDelegate;
        
        private BeginOperationDelegate onBeginCloseDelegate;
        
        private EndOperationDelegate onEndCloseDelegate;
        
        private System.Threading.SendOrPostCallback onCloseCompletedDelegate;
        
        public ContentServiceClient() {
        }
        
        public ContentServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public ContentServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ContentServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ContentServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public System.Net.CookieContainer CookieContainer {
            get {
                System.ServiceModel.Channels.IHttpCookieContainerManager httpCookieContainerManager = this.InnerChannel.GetProperty<System.ServiceModel.Channels.IHttpCookieContainerManager>();
                if ((httpCookieContainerManager != null)) {
                    return httpCookieContainerManager.CookieContainer;
                }
                else {
                    return null;
                }
            }
            set {
                System.ServiceModel.Channels.IHttpCookieContainerManager httpCookieContainerManager = this.InnerChannel.GetProperty<System.ServiceModel.Channels.IHttpCookieContainerManager>();
                if ((httpCookieContainerManager != null)) {
                    httpCookieContainerManager.CookieContainer = value;
                }
                else {
                    throw new System.InvalidOperationException("Unable to set the CookieContainer. Please make sure the binding contains an HttpC" +
                            "ookieContainerBindingElement.");
                }
            }
        }
        
        public event System.EventHandler<ReturnServerTimeCompletedEventArgs> ReturnServerTimeCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> OpenCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> CloseCompleted;
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult SynchronousWebServiceCalling.ContentServiceReference.ContentService.BeginReturnServerTime(System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginReturnServerTime(callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        string SynchronousWebServiceCalling.ContentServiceReference.ContentService.EndReturnServerTime(System.IAsyncResult result) {
            return base.Channel.EndReturnServerTime(result);
        }
        
        private System.IAsyncResult OnBeginReturnServerTime(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return ((SynchronousWebServiceCalling.ContentServiceReference.ContentService)(this)).BeginReturnServerTime(callback, asyncState);
        }
        
        private object[] OnEndReturnServerTime(System.IAsyncResult result) {
            string retVal = ((SynchronousWebServiceCalling.ContentServiceReference.ContentService)(this)).EndReturnServerTime(result);
            return new object[] {
                    retVal};
        }
        
        private void OnReturnServerTimeCompleted(object state) {
            if ((this.ReturnServerTimeCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.ReturnServerTimeCompleted(this, new ReturnServerTimeCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void ReturnServerTimeAsync() {
            this.ReturnServerTimeAsync(null);
        }
        
        public void ReturnServerTimeAsync(object userState) {
            if ((this.onBeginReturnServerTimeDelegate == null)) {
                this.onBeginReturnServerTimeDelegate = new BeginOperationDelegate(this.OnBeginReturnServerTime);
            }
            if ((this.onEndReturnServerTimeDelegate == null)) {
                this.onEndReturnServerTimeDelegate = new EndOperationDelegate(this.OnEndReturnServerTime);
            }
            if ((this.onReturnServerTimeCompletedDelegate == null)) {
                this.onReturnServerTimeCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnReturnServerTimeCompleted);
            }
            base.InvokeAsync(this.onBeginReturnServerTimeDelegate, null, this.onEndReturnServerTimeDelegate, this.onReturnServerTimeCompletedDelegate, userState);
        }
        
        private System.IAsyncResult OnBeginOpen(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return ((System.ServiceModel.ICommunicationObject)(this)).BeginOpen(callback, asyncState);
        }
        
        private object[] OnEndOpen(System.IAsyncResult result) {
            ((System.ServiceModel.ICommunicationObject)(this)).EndOpen(result);
            return null;
        }
        
        private void OnOpenCompleted(object state) {
            if ((this.OpenCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.OpenCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void OpenAsync() {
            this.OpenAsync(null);
        }
        
        public void OpenAsync(object userState) {
            if ((this.onBeginOpenDelegate == null)) {
                this.onBeginOpenDelegate = new BeginOperationDelegate(this.OnBeginOpen);
            }
            if ((this.onEndOpenDelegate == null)) {
                this.onEndOpenDelegate = new EndOperationDelegate(this.OnEndOpen);
            }
            if ((this.onOpenCompletedDelegate == null)) {
                this.onOpenCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnOpenCompleted);
            }
            base.InvokeAsync(this.onBeginOpenDelegate, null, this.onEndOpenDelegate, this.onOpenCompletedDelegate, userState);
        }
        
        private System.IAsyncResult OnBeginClose(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return ((System.ServiceModel.ICommunicationObject)(this)).BeginClose(callback, asyncState);
        }
        
        private object[] OnEndClose(System.IAsyncResult result) {
            ((System.ServiceModel.ICommunicationObject)(this)).EndClose(result);
            return null;
        }
        
        private void OnCloseCompleted(object state) {
            if ((this.CloseCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.CloseCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void CloseAsync() {
            this.CloseAsync(null);
        }
        
        public void CloseAsync(object userState) {
            if ((this.onBeginCloseDelegate == null)) {
                this.onBeginCloseDelegate = new BeginOperationDelegate(this.OnBeginClose);
            }
            if ((this.onEndCloseDelegate == null)) {
                this.onEndCloseDelegate = new EndOperationDelegate(this.OnEndClose);
            }
            if ((this.onCloseCompletedDelegate == null)) {
                this.onCloseCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnCloseCompleted);
            }
            base.InvokeAsync(this.onBeginCloseDelegate, null, this.onEndCloseDelegate, this.onCloseCompletedDelegate, userState);
        }
        
        protected override SynchronousWebServiceCalling.ContentServiceReference.ContentService CreateChannel() {
            return new ContentServiceClientChannel(this);
        }
        
        private class ContentServiceClientChannel : ChannelBase<SynchronousWebServiceCalling.ContentServiceReference.ContentService>, SynchronousWebServiceCalling.ContentServiceReference.ContentService {
            
            public ContentServiceClientChannel(System.ServiceModel.ClientBase<SynchronousWebServiceCalling.ContentServiceReference.ContentService> client) : 
                    base(client) {
            }
            
            public System.IAsyncResult BeginReturnServerTime(System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[0];
                System.IAsyncResult _result = base.BeginInvoke("ReturnServerTime", _args, callback, asyncState);
                return _result;
            }
            
            public string EndReturnServerTime(System.IAsyncResult result) {
                object[] _args = new object[0];
                string _result = ((string)(base.EndInvoke("ReturnServerTime", _args, result)));
                return _result;
            }
        }
    }
}
